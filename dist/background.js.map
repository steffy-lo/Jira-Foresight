{"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,4CAA4C,CAC5C,4CAAuB;;;ACDvB,MAAM,gBAAgB,GAAG,CAAA,GAAG,GAAI,IAAI,OAAO,CAAE,CAAA,QAAO,GAChD,GAAG,CAAC,YAAY,EAAG,CAAC,WAAW,CAAE,CAAA,OAAO,GACpC,OAAO,CAAC,GAAG,CAAE,OAAO,CAAC,MAAM,CAAE,CAAA,CAAC,GAAI,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,GAAG,CAAE,CAAA,CAAC,GACvD,CAAC,CAAC,WAAW,GACP,gBAAgB,CAAE,CAAC,CAAC,GACpB,IAAI,OAAO,CAAE,CAAA,OAAO,GAAI,CAAC,CAAC,IAAI,CAAE,OAAO,CAAC,CAAC,CAClD,CAAC,CACD,IAAI,CAAE,CAAA,KAAK,GAAI,EAAE,CAAC,MAAM,IAAK,KAAK,CAAC,CAAC,CACpC,IAAI,CAAE,QAAO,CAAC,CAClB,CACJ;AAED,MAAM,4BAA4B,GAAG,CAAA,GAAG,GAChC,gBAAgB,CAAE,GAAG,CAAC,CAAC,IAAI,CAAE,CAAA,KAAK,GAC9B,KAAK,CAAC,GAAG,CAAE,CAAA,CAAC,GAAI,CAAC,CAAC,IAAI,GAAG,CAAC,CAAC,gBAAgB,CAAC,CAAC,IAAI,EAAG,CAAC;AAEjE,MAAM,YAAY,GAAG,CAAC,GAAG,EAAE,aAAa,GAAK;IACzC,4BAA4B,CAAE,GAAG,CAAC,CAAC,IAAI,CAAE,CAAA,SAAS,GAAI;QAClD,IAAI,CAAC,aAAa,IAAK,aAAa,KAAK,SAAS,AAAC,EAC/C,UAAU,CAAE,IAAM,YAAY,CAAE,GAAG,EAAE,SAAS,CAAC,EAAE,IAAI,CAAC,CAAC,iBAAiB;;aAExE,MAAM,CAAC,OAAO,CAAC,MAAM,EAAG;KAE/B,CAAC;CACL;AAED,MAAM,CAAC,UAAU,CAAC,OAAO,CAAE,CAAA,IAAI,GAAI;IAC/B,IAAI,IAAI,CAAC,WAAW,KAAK,aAAa,EAAE;QACpC,MAAM,CAAC,OAAO,CAAC,wBAAwB,CAAE,CAAA,GAAG,GAAI,YAAY,CAAE,GAAG,CAAC,CAAC;QACnE,MAAM,CAAC,IAAI,CAAC,KAAK,CAAE;YAAE,MAAM,EAAE,IAAI;YAAE,iBAAiB,EAAE,IAAI;SAAE,EAAE,CAAA,IAAI,GAAI;YAClE,IAAI,IAAI,CAAC,CAAC,CAAC,EACP,MAAM,CAAC,IAAI,CAAC,MAAM,CAAE,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;SAEtC,CAAC;KACL;CACJ,CAAC","sources":["src/background.js","node_modules/crx-hotreload/hot-reload.js"],"sourcesContent":["/*To get hotreload working for TailwindCSS*/\r\nimport \"crx-hotreload\"; \r\n","const filesInDirectory = dir => new Promise (resolve =>\n    dir.createReader ().readEntries (entries =>\n        Promise.all (entries.filter (e => e.name[0] !== '.').map (e =>\n            e.isDirectory\n                ? filesInDirectory (e)\n                : new Promise (resolve => e.file (resolve))\n        ))\n        .then (files => [].concat (...files))\n        .then (resolve)\n    )\n)\n\nconst timestampForFilesInDirectory = dir =>\n        filesInDirectory (dir).then (files =>\n            files.map (f => f.name + f.lastModifiedDate).join ())\n\nconst watchChanges = (dir, lastTimestamp) => {\n    timestampForFilesInDirectory (dir).then (timestamp => {\n        if (!lastTimestamp || (lastTimestamp === timestamp)) {\n            setTimeout (() => watchChanges (dir, timestamp), 1000) // retry after 1s\n        } else {\n            chrome.runtime.reload ()\n        }\n    })\n}\n\nchrome.management.getSelf (self => {\n    if (self.installType === 'development') {\n        chrome.runtime.getPackageDirectoryEntry (dir => watchChanges (dir))\n        chrome.tabs.query ({ active: true, lastFocusedWindow: true }, tabs => { // NB: see https://github.com/xpl/crx-hotreload/issues/5\n            if (tabs[0]) {\n                chrome.tabs.reload (tabs[0].id)\n            }\n        })\n    }\n})\n"],"names":[],"version":3,"file":"background.js.map","sourceRoot":"../"}